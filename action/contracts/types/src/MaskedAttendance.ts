/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MaskedAttendanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "checkIn"
      | "compareStudentScores"
      | "courses"
      | "createCourse"
      | "encryptedAttendance"
      | "encryptedStudentScore"
      | "encryptedTotalAttendance"
      | "finalizeCourse"
      | "generateRandomBonus"
      | "getCourseAttendance"
      | "getCourseDebugInfo"
      | "getCourseInfo"
      | "getStudentAttendance"
      | "getStudentScore"
      | "hasStudentCheckedIn"
      | "isStudent"
      | "isTeacher"
      | "nextCourseId"
      | "protocolId"
      | "registerStudent"
      | "registerTeacher"
      | "selfRegister"
      | "toggleCourseStatus"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CourseCreated"
      | "CourseFinalized"
      | "CourseStatusChanged"
      | "StudentCheckedIn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkIn",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compareStudentScores",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "courses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCourse",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedAttendance",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedStudentScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedTotalAttendance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeCourse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateRandomBonus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCourseAttendance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCourseDebugInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCourseInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentAttendance",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasStudentCheckedIn",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isStudent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTeacher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCourseId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerStudent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTeacher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selfRegister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleCourseStatus",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compareStudentScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "courses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedStudentScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedTotalAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateRandomBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCourseAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCourseDebugInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCourseInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasStudentCheckedIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isStudent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isTeacher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextCourseId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTeacher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleCourseStatus",
    data: BytesLike
  ): Result;
}

export namespace CourseCreatedEvent {
  export type InputTuple = [
    courseId: BigNumberish,
    name: string,
    teacher: AddressLike
  ];
  export type OutputTuple = [courseId: bigint, name: string, teacher: string];
  export interface OutputObject {
    courseId: bigint;
    name: string;
    teacher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CourseFinalizedEvent {
  export type InputTuple = [courseId: BigNumberish];
  export type OutputTuple = [courseId: bigint];
  export interface OutputObject {
    courseId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CourseStatusChangedEvent {
  export type InputTuple = [courseId: BigNumberish, isActive: boolean];
  export type OutputTuple = [courseId: bigint, isActive: boolean];
  export interface OutputObject {
    courseId: bigint;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StudentCheckedInEvent {
  export type InputTuple = [courseId: BigNumberish, student: AddressLike];
  export type OutputTuple = [courseId: bigint, student: string];
  export interface OutputObject {
    courseId: bigint;
    student: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MaskedAttendance extends BaseContract {
  connect(runner?: ContractRunner | null): MaskedAttendance;
  waitForDeployment(): Promise<this>;

  interface: MaskedAttendanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  checkIn: TypedContractMethod<
    [courseId: BigNumberish, encryptedStatus: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  compareStudentScores: TypedContractMethod<
    [student1: AddressLike, student2: AddressLike],
    [string],
    "nonpayable"
  >;

  courses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, boolean, boolean] & {
        courseId: bigint;
        name: string;
        teacher: string;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        isFinalized: boolean;
      }
    ],
    "view"
  >;

  createCourse: TypedContractMethod<
    [name: string, startTime: BigNumberish, endTime: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  encryptedAttendance: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [string],
    "view"
  >;

  encryptedStudentScore: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  encryptedTotalAttendance: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  finalizeCourse: TypedContractMethod<
    [courseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  generateRandomBonus: TypedContractMethod<
    [student: AddressLike],
    [void],
    "nonpayable"
  >;

  getCourseAttendance: TypedContractMethod<
    [courseId: BigNumberish],
    [string],
    "view"
  >;

  getCourseDebugInfo: TypedContractMethod<
    [courseId: BigNumberish],
    [
      [string, string, bigint, bigint, boolean, boolean, bigint, boolean] & {
        name: string;
        teacher: string;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        isFinalized: boolean;
        currentTime: bigint;
        canCheckIn: boolean;
      }
    ],
    "view"
  >;

  getCourseInfo: TypedContractMethod<
    [courseId: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        name: string;
        teacher: string;
        startTime: bigint;
        endTime: bigint;
        isFinalized: boolean;
      }
    ],
    "view"
  >;

  getStudentAttendance: TypedContractMethod<
    [courseId: BigNumberish, student: AddressLike],
    [string],
    "view"
  >;

  getStudentScore: TypedContractMethod<
    [student: AddressLike],
    [string],
    "view"
  >;

  hasStudentCheckedIn: TypedContractMethod<
    [courseId: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  isStudent: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isTeacher: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  nextCourseId: TypedContractMethod<[], [bigint], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  registerStudent: TypedContractMethod<
    [student: AddressLike],
    [void],
    "nonpayable"
  >;

  registerTeacher: TypedContractMethod<
    [teacher: AddressLike],
    [void],
    "nonpayable"
  >;

  selfRegister: TypedContractMethod<[], [void], "nonpayable">;

  toggleCourseStatus: TypedContractMethod<
    [courseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkIn"
  ): TypedContractMethod<
    [courseId: BigNumberish, encryptedStatus: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "compareStudentScores"
  ): TypedContractMethod<
    [student1: AddressLike, student2: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "courses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, boolean, boolean] & {
        courseId: bigint;
        name: string;
        teacher: string;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        isFinalized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCourse"
  ): TypedContractMethod<
    [name: string, startTime: BigNumberish, endTime: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "encryptedAttendance"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "encryptedStudentScore"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "encryptedTotalAttendance"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "finalizeCourse"
  ): TypedContractMethod<[courseId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generateRandomBonus"
  ): TypedContractMethod<[student: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCourseAttendance"
  ): TypedContractMethod<[courseId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCourseDebugInfo"
  ): TypedContractMethod<
    [courseId: BigNumberish],
    [
      [string, string, bigint, bigint, boolean, boolean, bigint, boolean] & {
        name: string;
        teacher: string;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        isFinalized: boolean;
        currentTime: bigint;
        canCheckIn: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCourseInfo"
  ): TypedContractMethod<
    [courseId: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        name: string;
        teacher: string;
        startTime: bigint;
        endTime: bigint;
        isFinalized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudentAttendance"
  ): TypedContractMethod<
    [courseId: BigNumberish, student: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudentScore"
  ): TypedContractMethod<[student: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "hasStudentCheckedIn"
  ): TypedContractMethod<
    [courseId: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isStudent"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTeacher"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextCourseId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerStudent"
  ): TypedContractMethod<[student: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerTeacher"
  ): TypedContractMethod<[teacher: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "selfRegister"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "toggleCourseStatus"
  ): TypedContractMethod<[courseId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CourseCreated"
  ): TypedContractEvent<
    CourseCreatedEvent.InputTuple,
    CourseCreatedEvent.OutputTuple,
    CourseCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CourseFinalized"
  ): TypedContractEvent<
    CourseFinalizedEvent.InputTuple,
    CourseFinalizedEvent.OutputTuple,
    CourseFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "CourseStatusChanged"
  ): TypedContractEvent<
    CourseStatusChangedEvent.InputTuple,
    CourseStatusChangedEvent.OutputTuple,
    CourseStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "StudentCheckedIn"
  ): TypedContractEvent<
    StudentCheckedInEvent.InputTuple,
    StudentCheckedInEvent.OutputTuple,
    StudentCheckedInEvent.OutputObject
  >;

  filters: {
    "CourseCreated(uint256,string,address)": TypedContractEvent<
      CourseCreatedEvent.InputTuple,
      CourseCreatedEvent.OutputTuple,
      CourseCreatedEvent.OutputObject
    >;
    CourseCreated: TypedContractEvent<
      CourseCreatedEvent.InputTuple,
      CourseCreatedEvent.OutputTuple,
      CourseCreatedEvent.OutputObject
    >;

    "CourseFinalized(uint256)": TypedContractEvent<
      CourseFinalizedEvent.InputTuple,
      CourseFinalizedEvent.OutputTuple,
      CourseFinalizedEvent.OutputObject
    >;
    CourseFinalized: TypedContractEvent<
      CourseFinalizedEvent.InputTuple,
      CourseFinalizedEvent.OutputTuple,
      CourseFinalizedEvent.OutputObject
    >;

    "CourseStatusChanged(uint256,bool)": TypedContractEvent<
      CourseStatusChangedEvent.InputTuple,
      CourseStatusChangedEvent.OutputTuple,
      CourseStatusChangedEvent.OutputObject
    >;
    CourseStatusChanged: TypedContractEvent<
      CourseStatusChangedEvent.InputTuple,
      CourseStatusChangedEvent.OutputTuple,
      CourseStatusChangedEvent.OutputObject
    >;

    "StudentCheckedIn(uint256,address)": TypedContractEvent<
      StudentCheckedInEvent.InputTuple,
      StudentCheckedInEvent.OutputTuple,
      StudentCheckedInEvent.OutputObject
    >;
    StudentCheckedIn: TypedContractEvent<
      StudentCheckedInEvent.InputTuple,
      StudentCheckedInEvent.OutputTuple,
      StudentCheckedInEvent.OutputObject
    >;
  };
}
